name: CI

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14] #x86_64 and aarch64
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13' 
        
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install libusb qt@5 boost
        brew upgrade qt@5
        brew upgrade boost
        brew link libusb
        #brew link qt
        echo "/usr/local/opt/qt/bin" >> $GITHUB_PATH

    - name: Clone and build libsmu (macOS)
      if: runner.os == 'macOS'
      run: |
        git clone https://github.com/m1k-builds/libsmu-macOS.git libsmu
        cd libsmu
        mkdir build && cd build
        export MY_INSTALL_DIR=/usr/local
        mkdir -p $MY_INSTALL_DIR
        export PATH="$MY_INSTALL_DIR/bin:$PATH"
        cmake -DCMAKE_CXX_STANDARD=14 -DOSX_PACKAGE=ON -DBUILD_PYTHON=OFF -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR ..
        make
        sudo make install
        cd ../..

    - name: Build Pixelpulse2 (macOS)
      if: runner.os == 'macOS'
      run: |
        mkdir build && cd build

        ls $(brew --prefix qt5)/lib/cmake/Qt5
        cmake  -DQt5_DIR=$(brew --prefix qt5)/lib/cmake/Qt5 ..

        make

        #mkdir -p Pixelpulse2.app/Contents/plugins/platforms
        #ls $(brew --prefix qt5)
        #cp -r $(brew --prefix qt5)/plugins/* Pixelpulse2.app/Contents/plugins/

        #sudo make install
        cd ..

    - name: Run macOS specific steps
      if: runner.os == 'macOS'
      run: |
        cd build

        #$(brew --prefix qt5)/bin/macdeployqt pixelpulse2.app -always-overwrite -verbose=2 -qmldir=../qml
        #cd ..

        
        # Get the full path of libsmu and extract the version
        libsmuversion="1.0.4" #TODO: Fix hardcode
        libsmupath="/Library/Frameworks/libsmu.framework/Versions/$libsmuversion"
            
        # Extract the filename from the path
        libsmuid=$(basename "$libsmupath")
            
        # Copy the library to the app's Frameworks directory
        cp -r "$libsmupath" "build/pixelpulse2.app/Contents/Frameworks/"
            
        # Update the library's ID
        sudo install_name_tool -id "@executable_path/../Frameworks/$libsmuid/libsmu" "build/pixelpulse2.app/Contents/Frameworks/$libsmuid/libsmu"
            
        # Update the library path in the main executable
        sudo install_name_tool -change "$libsmupath" "@executable_path/../Frameworks/$libsmuid/libsmu" "build/pixelpulse2.app/Contents/MacOS/Pixelpulse2"
            
        # Change to the build directory
        cd build
        chmod +w pixelpulse2.app/Contents/MacOS/pixelpulse2

            
        # Use macdeployqt to create the DMG
        "$(brew --prefix qt5)/bin/macdeployqt" pixelpulse2.app -dmg -no-plugins     -always-overwrite -verbose=2 -qmldir=../qml
            
        # Rename the DMG to include the libsmu version
        for x in *.dmg; do 
            mv "$x" "${x%.dmg}-libsmu-${libsmuversion}.dmg"
        done
            
        # Return to the original directory
        cd ..



    - name: Upload Release Asset (macOS)
      if: runner.os == 'macOS'
      uses: softprops/action-gh-release@v1
      with:
        target_commitish: ${{ github.ref_name }}
        files: build/*.dmg
        name: pixelpulse2-${{ github.ref_name }}.dmg
        tag_name: ${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
